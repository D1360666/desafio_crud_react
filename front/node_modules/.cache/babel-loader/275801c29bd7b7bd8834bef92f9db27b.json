{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tecnico\\\\Desktop\\\\Sofka\\\\React\\\\kata-crud-refactoring\\\\front\\\\src\\\\Components\\\\ListView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport ToDoForm from \"../todo/FormView\";\nimport ToDoList from \"../todo/ListView\";\nimport consumer from \"./consumer\";\nimport events from \"./events\";\nimport Store from \"../store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  const {\n    state: {\n      list,\n      todo\n    },\n    dispatch\n  } = useContext(Store);\n  const [isLoaded, setLoaded] = useState(false);\n  useEffect(() => {\n    consumer.findAll().then(response => {\n      if (response.ok) {\n        response.json().then(list => {\n          dispatch(events.finded(list));\n          console.log(\"lista cargada con éxito\");\n        });\n      }\n\n      setLoaded(true);\n    });\n  }, [dispatch]);\n\n  const onDelete = listId => {\n    consumer.delete(listId).then(response => {\n      if (response.ok) {\n        dispatch(events.deleted(listId));\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 23\n    }, this), list.elements.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"empty list!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 40\n    }, this), list.elements.map(element => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"list-to-do-\" + element.id,\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n            children: [element.name.toUpperCase(), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => onDelete(element, id),\n              children: \"Eliminar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ToDoForm, {\n            listId: element.id,\n            todo: todo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ToDoList, {\n            listId: element.id,\n            todo: todo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this)\n      }, element.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 20\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 12\n  }, this);\n}, \"pL/ukEw7clZTnmp/yVo2Kh7+0pk=\");","map":{"version":3,"sources":["C:/Users/tecnico/Desktop/Sofka/React/kata-crud-refactoring/front/src/Components/ListView.js"],"names":["React","useState","useContext","useEffect","ToDoForm","ToDoList","consumer","events","Store","state","list","todo","dispatch","isLoaded","setLoaded","findAll","then","response","ok","json","finded","console","log","onDelete","listId","delete","deleted","elements","length","map","element","id","name","toUpperCase"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,kBAAe,MAAM;AAAA;;AACjB,QAAM;AAAEC,IAAAA,KAAK,EAAE;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAT;AAAuBC,IAAAA;AAAvB,MAAmCV,UAAU,CAACM,KAAD,CAAnD;AACA,QAAM,CAACK,QAAD,EAAWC,SAAX,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;AACAE,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,QAAQ,CAACS,OAAT,GAAmBC,IAAnB,CAAyBC,QAAD,IAAc;AAClC,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACXD,QAAAA,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAsBN,IAAD,IAAU;AAC3BE,UAAAA,QAAQ,CAACL,MAAM,CAACa,MAAP,CAAcV,IAAd,CAAD,CAAR;AACAW,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACH,SAHD;AAIH;;AACDR,MAAAA,SAAS,CAAC,IAAD,CAAT;AACH,KARD;AASH,GAVQ,EAUN,CAACF,QAAD,CAVM,CAAT;;AAYA,QAAMW,QAAQ,GAAGC,MAAD,IAAY;AACxBlB,IAAAA,QAAQ,CAACmB,MAAT,CAAgBD,MAAhB,EAAwBR,IAAxB,CAA8BC,QAAD,IAAc;AACvC,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACXN,QAAAA,QAAQ,CAACL,MAAM,CAACmB,OAAP,CAAeF,MAAf,CAAD,CAAR;AACH;AACJ,KAJD;AAKH,GAND;;AAQA,sBAAO;AAAA,eACF,CAACX,QAAD,iBAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADX,EAEFH,IAAI,CAACiB,QAAL,CAAcC,MAAd,KAAyB,CAAzB,iBAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAF5B,EAGFlB,IAAI,CAACiB,QAAL,CAAcE,GAAd,CAAmBC,OAAD,IACf;AACA,0BAAO;AAAsB,QAAA,EAAE,EAAE,gBAAcA,OAAO,CAACC,EAAhD;AAAA,+BACH;AAAA,kCACI;AAAA,uBACKD,OAAO,CAACE,IAAR,CAAaC,WAAb,EADL,eAEI;AAAQ,cAAA,OAAO,EAAE,MAAMV,QAAQ,CAACO,OAAD,EAAUC,EAAV,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAKI,QAAC,QAAD;AAAU,YAAA,MAAM,EAAED,OAAO,CAACC,EAA1B;AAA8B,YAAA,IAAI,EAAEpB;AAApC;AAAA;AAAA;AAAA;AAAA,kBALJ,eAMI,QAAC,QAAD;AAAU,YAAA,MAAM,EAAEmB,OAAO,CAACC,EAA1B;AAA8B,YAAA,IAAI,EAAEpB;AAApC;AAAA;AAAA;AAAA;AAAA,kBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADG,SAAUmB,OAAO,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA,cAAP;AAUH,KAZA,CAHE;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAkBH,CAzCD","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport ToDoForm from \"../todo/FormView\";\r\nimport ToDoList from \"../todo/ListView\";\r\nimport consumer from \"./consumer\";\r\nimport events from \"./events\";\r\nimport Store from \"../store\"\r\n\r\nexport default () => {\r\n    const { state: {list, todo}, dispatch} = useContext(Store);\r\n    const [isLoaded, setLoaded] = useState(false);\r\n    useEffect(() => {\r\n        consumer.findAll().then((response) => {\r\n            if(response.ok){\r\n                response.json().then((list) => {\r\n                    dispatch(events.finded(list));\r\n                    console.log(\"lista cargada con éxito\");\r\n                });\r\n            }\r\n            setLoaded(true);\r\n        })\r\n    }, [dispatch]);\r\n\r\n    const onDelete =(listId) => {\r\n        consumer.delete(listId).then((response) => {\r\n            if(response.ok){\r\n                dispatch(events.deleted(listId));\r\n            }\r\n        })\r\n    };\r\n\r\n    return <div>\r\n        {!isLoaded && <div>Loading...</div>}\r\n        {list.elements.length === 0 && <div>empty list!</div>}\r\n        {list.elements.map((element) => \r\n            {\r\n            return <div key={element.id} id={\"list-to-do-\"+element.id}>\r\n                <fieldset>\r\n                    <legend>\r\n                        {element.name.toUpperCase()}\r\n                        <button onClick={() => onDelete(element, id)}>Eliminar</button>\r\n                    </legend>\r\n                    <ToDoForm listId={element.id} todo={todo} />\r\n                    <ToDoList listId={element.id} todo={todo} />\r\n                </fieldset> \r\n            </div>\r\n        })}\r\n    </div>\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}