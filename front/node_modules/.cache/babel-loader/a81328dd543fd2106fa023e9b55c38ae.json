{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tecnico\\\\Desktop\\\\Sofka\\\\React\\\\kata-crud-refactoring\\\\front\\\\src\\\\Components\\\\FormView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useRef } from 'react';\nimport consumer from './consumer';\nimport events from './events';\nimport Store from '../store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  const {\n    dispatch\n  } = useContext(Store);\n  const formRef = useRef(null);\n  const [state, setState] = useState({\n    name: \"\"\n  });\n\n  const onCreate = event => {\n    event.preventDefault();\n    consumer.save({\n      name: state.name,\n      id: null\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(newList => {\n          dispatch(events.saved(newList));\n          formRef.current.reset();\n          setState({\n            name: \"\"\n          });\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    ref: formRef,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Lista de TO-DO\",\n      onChange: event => {\n        setState({\n          name: event.target.value\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onCreate,\n      children: \"Nueva lista\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 12\n  }, this);\n}, \"BsGDn6S4RV57gyHJHb7oWeaOqvE=\");","map":{"version":3,"sources":["C:/Users/tecnico/Desktop/Sofka/React/kata-crud-refactoring/front/src/Components/FormView.js"],"names":["React","useContext","useState","useRef","consumer","events","Store","dispatch","formRef","state","setState","name","onCreate","event","preventDefault","save","id","then","response","ok","json","newList","saved","current","reset","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,kBAAc,MAAM;AAAA;;AAChB,QAAM;AAAEC,IAAAA;AAAF,MAAeN,UAAU,CAACK,KAAD,CAA/B;AACA,QAAME,OAAO,GAAGL,MAAM,CAAC,IAAD,CAAtB;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC;AAAES,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAlC;;AACA,QAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACC,cAAN;AACAV,IAAAA,QAAQ,CAACW,IAAT,CAAc;AAAEJ,MAAAA,IAAI,EAAEF,KAAK,CAACE,IAAd;AAAoBK,MAAAA,EAAE,EAAC;AAAvB,KAAd,EACKC,IADL,CACWC,QAAD,IAAc;AAChB,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACXD,QAAAA,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAsBI,OAAD,IAAa;AAC9Bd,UAAAA,QAAQ,CAACF,MAAM,CAACiB,KAAP,CAAaD,OAAb,CAAD,CAAR;AACAb,UAAAA,OAAO,CAACe,OAAR,CAAgBC,KAAhB;AACAd,UAAAA,QAAQ,CAAC;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAR;AACH,SAJD;AAKH;AACJ,KATL;AAUH,GAZD;;AAaA,sBAAO;AAAM,IAAA,GAAG,EAAEH,OAAX;AAAA,4BACH;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,WAAW,EAAC,gBAHhB;AAII,MAAA,QAAQ,EAAGK,KAAD,IAAW;AACjBH,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAEE,KAAK,CAACY,MAAN,CAAaC;AAArB,SAAD,CAAR;AACH;AANL;AAAA;AAAA;AAAA;AAAA,YADG,eAQC;AAAQ,MAAA,OAAO,EAAEd,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARD;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAUH,CA3BD","sourcesContent":["import React, {useContext, useState, useRef } from 'react';\r\nimport consumer from './consumer';\r\nimport events from './events';\r\nimport Store from '../store';\r\n\r\nexport default() => {\r\n    const { dispatch } = useContext(Store);\r\n    const formRef = useRef(null);\r\n    const [state, setState] = useState({ name: \"\"});\r\n    const onCreate = (event) => {\r\n        event.preventDefault();\r\n        consumer.save({ name: state.name, id:null })\r\n            .then((response) => {\r\n                if(response.ok){\r\n                    response.json().then((newList) => {\r\n                        dispatch(events.saved(newList));\r\n                        formRef.current.reset();\r\n                        setState({ name: \"\"})\r\n                    })\r\n                }\r\n            });\r\n    };\r\n    return <form ref={formRef}>\r\n        <input \r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder='Lista de TO-DO'\r\n            onChange={(event) => {\r\n                setState({ name: event.target.value})\r\n            }}></input>\r\n            <button onClick={onCreate}>Nueva lista</button>\r\n    </form>\r\n};"]},"metadata":{},"sourceType":"module"}